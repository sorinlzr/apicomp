type Query {
    students(limit: Int, offset: Int): [Student]
    student(id: ID!): Student
    courses(limit: Int, offset: Int): [Course]
    course(id: ID!): Course
    teachers(limit: Int, offset: Int): [Teacher]
    teacher(id: ID!): Teacher
    enrollmentsForCourse(courseId: Int): [Enrollment]
    enrollmentsForStudent(studentId: Int): [Enrollment]
    enrollment(id: ID!): Enrollment
    universities(limit: Int, offset: Int): [University]
    university(id: ID!): University
}

type Mutation {
    createStudent(name: String!, email: String!): Student
    updateStudent(id: ID!, name: String!, email: String!): Student
    createCourse(title: String!, description: String!): Course
    updateCourse(id: ID!, title: String!, description: String!): Course
    createTeacher(name: String!, department: String!): Teacher
    updateTeacher(id: ID!, name: String!, department: String!): Teacher
    createEnrollment(courseId: Int!, studentId: Int!, enrollmentDate: String): Enrollment
}

type Subscription {
    studentCount: Int
}


type Student {
    id: ID
    name: String
    email: String
    enrollments: [Enrollment]
}

type Course {
    id: ID
    title: String
    description: String
    teacher: Teacher
    enrollments: [Enrollment]
}

type Enrollment {
    id: ID
    courseId: String
    courseDescription: String
    studentId: String
    studentName: String
    studentEmail: String
    enrollmentDate: String
}

type Teacher {
    id: ID
    name: String
    department: String
    courses: [Course]
}

type University {
    id: ID
    name: String
}
